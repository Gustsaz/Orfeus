// ---------------- Ranking ---------------- async function updateUserScore(delta) { if (!currentUser) return; try { const userRef = db.collection('users').doc(currentUser.uid); const userDoc = await userRef.get(); if (userDoc.exists) { const userData = userDoc.data(); const newScore = (userData.points || 0) + delta; await userRef.update({ points: newScore }); userPoints = newScore; // Atualizar exibição de pontos const pointsElement = document.querySelector('.user-points'); if (pointsElement) { pointsElement.textContent = ${userPoints} pts; } // Atualizar ranking await updateRanking(); } } catch (error) { console.error('Erro ao atualizar pontuação:', error); } } // Função para atualizar ranking // Função para atualizar ranking na homepage async function updateRanking(period = "all") { try { const tableBody = document.querySelector("#homeRankingTable tbody"); if (!tableBody) return; tableBody.innerHTML = "<tr><td colspan='3'>Carregando...</td></tr>"; let query = db.collection("ranking"); // Ranking só por pontos (você pode depois adaptar para mensal/semanal) query = query.orderBy("points", "desc").limit(10); const snapshot = await query.get(); tableBody.innerHTML = ""; let pos = 1; snapshot.forEach(doc => { const data = doc.data(); const tr = document.createElement("tr"); tr.innerHTML = <td>${pos}</td> <td> <img src="${data.photoURL || 'https://via.placeholder.com/30'}" style="width:30px; height:30px; border-radius:50%; margin-right:8px;"> ${data.displayName || data.email} </td> <td>${data.points || 0}</td> ; tableBody.appendChild(tr); pos++; }); if (tableBody.innerHTML === "") { tableBody.innerHTML = "<tr><td colspan='3'>Nenhum dado</td></tr>"; } } catch (error) { console.error("Erro ao carregar ranking:", error); } } // Botões de teste const btnPlus = document.getElementById("btn-plus"); const btnMinus = document.getElementById("btn-minus"); if (btnPlus) btnPlus.addEventListener("click", () => updateUserScore(1)); if (btnMinus) btnMinus.addEventListener("click", () => updateUserScore(-1)); // Configuração do ranking let unsubscribeRanking = null; // Variável para controlar o "ouvinte" function initRanking() { // 1. Se já existe um ouvinte, não cria outro. if (unsubscribeRanking) { return; } const rankingQuery = db.collection("ranking") .orderBy("score", "desc") .limit(10); // 2. Guarda a função para "desligar" o ouvinte depois unsubscribeRanking = rankingQuery.onSnapshot((snap) => { // 3. Seleciona o corpo de AMBAS as tabelas const rankingTbody = document.querySelector("#ranking-table tbody"); const homeTbody = document.querySelector("#homeRankingTable tbody"); if (!rankingTbody || !homeTbody) return; // Limpa as tabelas rankingTbody.innerHTML = ""; homeTbody.innerHTML = ""; if (snap.empty) { const emptyRow = <tr><td colspan="3">Nenhum dado disponível</td></tr>; rankingTbody.innerHTML = emptyRow; homeTbody.innerHTML = emptyRow; return; } snap.forEach((doc, index) => { const data = doc.data(); // Cria a linha da tabela uma vez const row = document.createElement("tr"); const pos = <td>${index + 1}</td>; const user = <td><img src="${data.photo || 'imgs/user.png'}" class="user-avatar"> ${data.name || 'Anônimo'}</td>; const score = <td>${data.score || 0}</td>; // Monta a linha completa // OBS: A tabela do ranking completo tem 3 colunas (Pos, Usuário, Pontos) // A tabela da home tem um formato diferente (Usuário com foto embutida) // Vamos adaptar: const fullRankingRow = <tr><td>${index + 1}</td><td><img src="${data.photo || 'imgs/user.png'}" class="user-avatar"></td><td>${data.name || 'Anônimo'}</td><td>${data.score || 0}</td></tr>; const homeRankingRow = <tr><td>${index + 1}</td><td><img src="${data.photo || 'imgs/user.png'}" class="user-avatar" style="width:24px; border-radius:50%; margin-right: 8px;">${data.name || 'Anônimo'}</td><td>${data.score || 0}</td></tr>; // Adiciona a linha em cada tabela rankingTbody.innerHTML += fullRankingRow; // Adaptar as colunas se necessário homeTbody.innerHTML += homeRankingRow; }); }, (error) => { console.error("Erro no ranking:", error); const errorRow = <tr><td colspan="3">Erro ao carregar dados</td></tr>; document.querySelector("#ranking-table tbody").innerHTML = errorRow; document.querySelector("#homeRankingTable tbody").innerHTML = errorRow; }); } // Chame a função para "desligar" o ouvinte quando o usuário fizer logout auth.onAuthStateChanged(async (user) => { renderAuthUi(user); if (user) { currentUser = user; // ... (seu código de verificação de usuário) initRanking(); // Inicia o listener do ranking após login } else { currentUser = null; // Se o usuário deslogou e o ouvinte existe, desative-o if (unsubscribeRanking) { unsubscribeRanking(); unsubscribeRanking = null; // Reseta a variável } } }); // Adiciona o ouvinte de clique CORRIGIDO para atividades (antigo ranking) document.querySelector('.tab-btn[data-tab="atividades"]')?.addEventListener("click", () => { // Apenas garante que a função seja chamada se o usuário já estiver logado if (currentUser) { initRanking(); } });
